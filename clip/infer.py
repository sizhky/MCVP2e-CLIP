# AUTOGENERATED! DO NOT EDIT! File to edit: ../nbs/05_infer.ipynb.

# %% auto 0
__all__ = ["get_image_embeddings", "find_matches"]

# %% ../nbs/05_infer.ipynb 3
from torch_snippets import *
from .dataset import DistilBertTokenizer


# %% ../nbs/05_infer.ipynb 4
@torch.no_grad()
def get_image_embeddings(val_dl, model):
    model.eval()
    valid_image_embeddings = []
    for batch in track2(val_dl):
        image_features = model.image_encoder(batch["image"].to(model.config.device))
        image_embeddings = model.image_projection(image_features)
        valid_image_embeddings.append(image_embeddings)
    return torch.cat(valid_image_embeddings)


@torch.no_grad()
def find_matches(model, image_embeddings, query, image_filenames):
    tokenizer = DistilBertTokenizer.from_pretrained(
        model.config.distilbert_text_tokenizer
    )
    encoded_query = tokenizer([query])
    batch = {
        key: torch.tensor(values).to(model.config.device)
        for key, values in encoded_query.items()
    }
    text_features = model.text_encoder(
        input_ids=batch["input_ids"], attention_mask=batch["attention_mask"]
    )
    text_embeddings = model.text_projection(text_features)

    image_embeddings_n = F.normalize(image_embeddings, p=2, dim=-1)
    text_embeddings_n = F.normalize(text_embeddings, p=2, dim=-1)
    dot_similarity = text_embeddings_n @ image_embeddings_n.T

    values, indices = torch.topk(dot_similarity.squeeze(0), 45)
    matches = [image_filenames[idx] for idx in indices[::5]]
    matches = [f"{model.config.image_path}/{match}" for match in matches]
    subplots(matches, nc=3, figsize=(10, 10))
